version: 2.1
commands:
  bazel_install:
    steps:
      - run:
          name: Bazel - Install
          command: |
            curl -OL https://github.com/bazelbuild/bazel/releases/download/0.20.0/bazel-0.20.0-installer-linux-x86_64.sh
            chmod +x bazel-0.20.0-installer-linux-x86_64.sh
            sudo ./bazel-0.20.0-installer-linux-x86_64.sh

  bazel_add_rbe_credential:
    steps:
      - run:
          name: Bazel - Add RBE Credential
          command: |
            if [[ -n "$BAZEL_RBE_CREDENTIAL" ]]; then
              BAZEL_RBE_CREDENTIAL_LOCATION=~/.config/gcloud/application_default_credentials.json
              echo "An RBE credential is found and will be saved to $BAZEL_RBE_CREDENTIAL_LOCATION. Bazel will be executed with RBE support."
              mkdir -p ~/.config/gcloud/
              echo $BAZEL_RBE_CREDENTIAL > "$BAZEL_RBE_CREDENTIAL_LOCATION"
            else
              echo "No RBE credential found. Bazel will be executed locally without RBE support."
            fi

  bazel:
    parameters:
      command:
        type: string
    steps:
      - run:
          name: Bazel - Execute
          command: |
            if [[ -f ~/.config/gcloud/application_default_credentials.json ]]; then
              echo "Bazel will be executed with RBE support. This means the build is remotely executed and the cache will be re-used by subsequent CI jobs."
              CMD="<< parameters.command >> --config=rbe"
            else
              echo "Bazel will be executed locally (without RBE support)."
              CMD="<< parameters.command >>"
            fi
            echo "Executing $CMD"
            $CMD

jobs:
  build:
    machine: true
    working_directory: ~/grakn
    steps:
      - checkout
      - bazel_install
      - bazel_add_rbe_credential
      - bazel:
          command: bazel build //...

  test:
    machine: true
    working_directory: ~/grakn
    steps:
      - checkout
      - bazel_install
      - bazel_add_rbe_credential
      - run: bazel build @graknlabs_grakn_core//:distribution
      - run: unzip bazel-genfiles/external/graknlabs_grakn_core/grakn-core-all.zip -d bazel-genfiles/dist/
      - run: nohup bazel-genfiles/dist/grakn-core-all/grakn server start
      - run: bazel test //:test_integration --test_output=streamed

  test-repo-deploy:
    machine: true
    working_directory: ~/grakn
    steps:
      - checkout
      - bazel_install
      - run: bazel run //:deploy-pip -- test $TEST_REPO_USERNAME $TEST_REPO_PASSWORD

  dependency-update:
    machine: true
    steps:
      - checkout
      - bazel_install
      - run:
          name: Sync docs:development dependency to the latest Grakn Client Python version
          command: |
            bazel run @graknlabs_grabl//sync:dependency-update -- --dependency client-python:master \
              --user docs:development

  release-approval:
    machine: true
    steps:
      - checkout
      - bazel_install
      - run: bazel run @graknlabs_grabl//ci:release-approval

  deploy-pypi:
    machine: true
    working_directory: ~/grakn
    steps:
      - checkout
      - bazel_install
      - bazel_add_rbe_credential
      - run: bazel run //:deploy-pip -- pypi $PYPI_REPO_USERNAME $PYPI_REPO_PASSWORD

  release-cleanup:
    machine: true
    steps:
      - checkout
      - run: git push --delete origin client-python-release-branch

workflows:
  version: 2
  client-python:
    jobs:
      - build
      - test
      - test-repo-deploy:
          filters:
            branches:
              only: master
          requires:
            - build
            - test
      - dependency-update:
          filters:
            branches:
              only: master
          requires:
            - build
            - test
      - release-approval:
          filters:
            branches:
              only: master
          requires:
            - build
            - test

  # the 'grakn-client-python-release' workflow is triggered by the creation of 'client-python-release-branch' branch in graknlabs/grakn
  # it consists of jobs which:
  # - publishes client-python to PyPI
  # - cleans up the 'client-python-release-branch' branch which was created by the release-approval job
  client-python-release:
    jobs:
      - deploy-pypi:
          filters:
            branches:
              only: client-python-release-branch
      - release-cleanup:
          requires:
            - deploy-pypi
          filters:
            branches:
              only: client-python-release-branch
