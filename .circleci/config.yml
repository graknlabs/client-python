#
# GRAKN.AI - THE KNOWLEDGE GRAPH
# Copyright (C) 2018 Grakn Labs Ltd
#
# This program is free software: you can redistribute it and/or modify
# it under the terms of the GNU Affero General Public License as
# published by the Free Software Foundation, either version 3 of the
# License, or (at your option) any later version.
#
# This program is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# GNU Affero General Public License for more details.
#
# You should have received a copy of the GNU Affero General Public License
# along with this program.  If not, see <https://www.gnu.org/licenses/>.
#

version: 2.1
commands:
  install-bazel-linux-rbe:
    steps:
      - run: curl -OL https://raw.githubusercontent.com/graknlabs/build-tools/master/ci/install-bazel-linux.sh
      - run: bash ./install-bazel-linux.sh && rm ./install-bazel-linux.sh
      - run: curl -OL https://raw.githubusercontent.com/graknlabs/build-tools/master/ci/install-bazel-rbe.sh
      - run: bash ./install-bazel-rbe.sh && rm ./install-bazel-rbe.sh

  run-bazel-rbe:
    parameters:
      command:
        type: string
    steps:
      - run: bazel run @graknlabs_build_tools//ci:run-bazel-rbe -- << parameters.command >>

  run-grakn-server:
    steps:
      - run-bazel-rbe:
          command: bazel build @graknlabs_grakn_core//:assemble-linux-targz
      - run: mkdir dist && tar -xvzf bazel-genfiles/external/graknlabs_grakn_core/grakn-core-all-linux.tar.gz -C ./dist/
      - run: nohup ./dist/grakn-core-all-linux/grakn server start

jobs:
  build:
    machine: true
    working_directory: ~/client-python
    steps:
      - install-bazel-linux-rbe
      - checkout
      - run-bazel-rbe:
          command: bazel build //...

  test:
    machine: true
    working_directory: ~/client-python
    steps:
      - install-bazel-linux-rbe
      - checkout
      - run-grakn-server
      - run: bazel test //:test_integration --test_output=streamed

  test-deployment:
    machine: true
    working_directory: ~/client-python
    steps:
      - install-bazel-linux-rbe
      - checkout
      - run: sudo apt-get update
      - run: sudo apt-get install python-pip
      - run: DEPLOYMENT_REPO_TYPE=test DEPLOYMENT_USERNAME=$REPO_GRAKN_USERNAME DEPLOYMENT_PASSWORD=$REPO_GRAKN_PASSWORD bazel run //:deploy-pip
      - run-grakn-server
      - run:
          name: Run test-deployment for client-python
          command: |
            # need to manipulate version file here, replacing SNAPSHOT with the commit SHA
            sed -i -e "s/SNAPSHOT/$CIRCLE_SHA1/g" VERSION
            # Insert the this updated version into the requirements.txt
            sed -i -e "s/CLIENT_PYTHON_VERSION_MARKER/$(cat VERSION)/g" tests/deployment/requirements.txt
            cat tests/deployment/requirements.txt
            # just a simple test using python2 (though code should be python3 compatible too)
            pip install -r tests/deployment/requirements.txt
            cd tests/deployment/ && python -m unittest test

  sync-dependencies:
    machine: true
    working_directory: ~/client-python
    steps:
      - install-bazel-linux-rbe
      - checkout
      - run: |
          bazel run @graknlabs_build_tools//ci:sync-dependencies -- \
          --source client-python@$CIRCLE_SHA1 \
          --targets docs:development examples:development

  release-approval:
    machine: true
    working_directory: ~/client-python
    steps:
      - install-bazel-linux-rbe
      - checkout
      - run: bazel run @graknlabs_build_tools//ci:release-approval

  release-github:
    machine: true
    working_directory: ~/client-python
    steps:
      - install-bazel-linux-rbe
      - checkout
      - run: bazel run //:deploy-github

  release-pypi:
    machine: true
    working_directory: ~/client-python
    steps:
      - install-bazel-linux-rbe
      - checkout
      - run: bazel run //:deploy-pip -- pypi $PYPI_REPO_USERNAME $REPO_PYPI_PASSWORD

  release-cleanup:
    machine: true
    steps:
      - checkout
      - run: git push --delete origin client-python-release-branch

workflows:
  client-python:
    jobs:
      - build:
          filters:
            branches:
              ignore: client-python-release-branch
      - test:
          filters:
            branches:
              ignore: client-python-release-branch
      - test-deployment:
          filters:
            branches:
              ignore: client-python-release-branch
      - sync-dependencies:
          filters:
            branches:
              only: master
          requires:
            - build
            - test
            - test-deployment
      - release-approval:
          filters:
            branches:
              only: master
          requires:
            - sync-dependencies

  client-python-release:
    jobs:
      - release-github:
          filters:
            branches:
              only: client-python-release-branch
      - release-deployment-approval:
          type: approval
          requires:
            - release-github
          filters:
            branches:
              only: client-python-release-branch
      - release-pypi:
          requires:
            - release-deployment-approval
          filters:
            branches:
              only: client-python-release-branch
      - release-cleanup:
          requires:
            - release-pypi
          filters:
            branches:
              only: client-python-release-branch
