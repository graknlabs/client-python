#
# Copyright (C) 2020 Grakn Labs
#
# This program is free software: you can redistribute it and/or modify
# it under the terms of the GNU Affero General Public License as
# published by the Free Software Foundation, either version 3 of the
# License, or (at your option) any later version.
#
# This program is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# GNU Affero General Public License for more details.
#
# You should have received a copy of the GNU Affero General Public License
# along with this program.  If not, see <https://www.gnu.org/licenses/>.
#

version: 2.1
commands:
  install-bazel:
    steps:
      - run: curl -OL https://raw.githubusercontent.com/graknlabs/dependencies/master/tool/bazelinstall/linux.sh
      - run: bash ./linux.sh && rm ./linux.sh
      - run: curl -OL https://raw.githubusercontent.com/graknlabs/dependencies/master/tool/bazelinstall/rbe.sh
      - run: bash ./rbe.sh && rm ./rbe.sh

  run-bazel:
    parameters:
      command:
        type: string
    steps:
      - run: bazel run @graknlabs_dependencies//tool/bazelrun:rbe -- << parameters.command >>

  run-grakn:
    steps:
      - run-bazel:
          command: bazel build @graknlabs_grakn_core//:assemble-linux-targz
      - run: mkdir dist && tar -xvzf bazel-bin/external/graknlabs_grakn_core/grakn-core-all-linux.tar.gz -C ./dist/
      - run: nohup ./dist/grakn-core-all-linux/grakn server start
jobs:
  build:
    machine: 
      image: ubuntu-1604:201903-01
    working_directory: ~/client-python
    steps:
      - install-bazel
      - checkout
      - run-bazel:
          command: bazel build //...

  test:
    machine: 
      image: ubuntu-1604:201903-01
    working_directory: ~/client-python
    steps:
      - install-bazel
      - checkout
      - run-bazel:
          command: bazel test //:test_integration --test_output=streamed

  deploy-pip-snapshot:
    machine: 
      image: ubuntu-1604:201903-01
    working_directory: ~/client-python
    steps:
      - install-bazel
      - checkout
      - run: |
          export DEPLOY_PIP_USERNAME=$REPO_GRAKN_USERNAME
          export DEPLOY_PIP_PASSWORD=$REPO_GRAKN_PASSWORD
          bazel run --define version=$(git rev-parse HEAD) //:deploy-pip -- snapshot

  test-deployment:
    machine: 
      image: ubuntu-1604:201903-01
    working_directory: ~/client-python
    steps:
      - install-bazel
      - checkout
      - run: sudo apt-get update
      - run: sudo apt-get install python-pip
      - run-grakn
      - run: sleep 60
      - run:
          name: Run test-deployment for client-python
          command: |
            echo -n "0.0.0-$CIRCLE_SHA1" > VERSION
            sed -i -e "s/CLIENT_PYTHON_VERSION_MARKER/$(cat VERSION)/g" tests/deployment/requirements.txt
            cat tests/deployment/requirements.txt
            pip install --upgrade pip
            pip install -r tests/deployment/requirements.txt
            cd tests/deployment/ && python -m unittest test

  sync-dependencies-snapshot:
    machine: 
      image: ubuntu-1604:201903-01
    working_directory: ~/client-python
    steps:
      - install-bazel
      - checkout
      - run: |
          export SYNC_DEPENDENCIES_TOKEN=$REPO_GITHUB_TOKEN
          bazel run @graknlabs_dependencies//tools/sync:dependencies -- \
          --source client-python@$CIRCLE_SHA1 \
          --targets grakn-kgms:master kglib:master

  release-approval:
    machine: 
      image: ubuntu-1604:201903-01
    working_directory: ~/client-python
    steps:
      - install-bazel
      - checkout
      - run: |
          export RELEASE_APPROVAL_USERNAME=$REPO_GITHUB_USERNAME
          export RELEASE_APPROVAL_TOKEN=$REPO_GITHUB_TOKEN
          bazel run @graknlabs_dependencies//tools/release:approval

  release-validate:
    machine: 
      image: ubuntu-1604:201903-01
    steps:
      - install-bazel
      - checkout
      - run: |
          bazel run @graknlabs_dependencies//tools/release:validate-deps -- \
            graknlabs_protocol

  deploy-github:
    machine: 
      image: ubuntu-1604:201903-01
    working_directory: ~/client-python
    steps:
      - install-bazel
      - checkout
      - run: |
          pip install certifi
          export RELEASE_NOTES_TOKEN=$REPO_GITHUB_TOKEN
          bazel run @graknlabs_dependencies//tools/release:create-notes -- client-python $(cat VERSION) ./RELEASE_TEMPLATE.md
      - run: bazel clean --expunge
      - run: |
          export DEPLOY_GITHUB_TOKEN=$REPO_GITHUB_TOKEN
          bazel run --define version=$(cat VERSION) //:deploy-github -- $CIRCLE_SHA1

  deploy-pip-release:
    machine: 
      image: ubuntu-1604:201903-01
    working_directory: ~/client-python
    steps:
      - install-bazel
      - checkout
      - run: |
          export DEPLOY_PIP_USERNAME=$REPO_PYPI_USERNAME
          export DEPLOY_PIP_PASSWORD=$REPO_PYPI_PASSWORD
          bazel run --define version=$(cat VERSION) //:deploy-pip -- release

  sync-dependencies-release:
    machine: 
      image: ubuntu-1604:201903-01
    working_directory: ~/client-python
    steps:
      - install-bazel
      - checkout
      - run: |
          export SYNC_DEPENDENCIES_TOKEN=$REPO_GITHUB_TOKEN
          bazel run @graknlabs_dependencies//tools/sync:dependencies -- \
          --source client-python@$(cat VERSION) \
          --targets grakn-kgms:master docs:master examples:master kglib:master

  release-cleanup:
    machine: 
      image: ubuntu-1604:201903-01
    steps:
      - checkout
      - run: git push --delete https://$REPO_GITHUB_TOKEN@github.com/graknlabs/client-python $CIRCLE_BRANCH

workflows:
  client-python:
    jobs:
      - build:
          filters:
            branches:
              ignore: client-python-release-branch
      - test:
          filters:
            branches:
              ignore: client-python-release-branch
      - deploy-pip-snapshot:
          filters:
            branches:
              only: master
          requires:
            - build
            - test
      - test-deployment:
          filters:
            branches:
              only: master
          requires:
            - deploy-pip-snapshot
      - sync-dependencies-snapshot:
          filters:
            branches:
              only: master
          requires:
            - test-deployment
      - release-approval:
          filters:
            branches:
              only: master
          requires:
            - sync-dependencies-snapshot

  client-python-release:
    jobs:
      - release-validate:
          filters:
            branches:
              only: client-python-release-branch
      - deploy-github:
          filters:
            branches:
              only: client-python-release-branch
          requires:
            - release-validate
      - deploy-approval:
          type: approval
          filters:
            branches:
              only: client-python-release-branch
          requires:
            - deploy-github
      - deploy-pip-release:
          filters:
            branches:
              only: client-python-release-branch
          requires:
            - deploy-approval
      - sync-dependencies-release:
          filters:
            branches:
              only: client-python-release-branch
          requires:
            - deploy-pip-release
      - release-cleanup:
          filters:
            branches:
              only: client-python-release-branch
          requires:
            - sync-dependencies-release
